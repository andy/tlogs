xml.instruct! :xml, :version => '1.0', :encoding => 'UTF-8'

xml.rss :version => '2.0', 'xmlns:ya' => "http://blogs.yandex.ru/schema/rss", 'xmlns:wfw' => "http://wellformedweb.org/CommentAPI/" do
  xml.channel do
    xml.title { xml.cdata!(host_for_tlog(current_site) + (current_site.tlog_settings.title.blank? ? '' : (" - " + h(current_site.tlog_settings.title)))) }
    xml.link user_url(current_site)
    xml.description { xml.cdata!(strip_tags(current_site.tlog_settings.about.strip)) } unless current_site.tlog_settings.about.blank?
    xml.language 'ru-RU'
    xml.pubDate @entries.first.created_at.to_s(:rfc822) if @entries && @entries.first
    xml.generator current_service.domain
    xml.ttl 30
    # xml.tag!('wfw:commentRss', user_url(current_site, tlog_feed_path(:action => 'comments')))
    xml.tag!('ya:more', user_url(current_site, tlog_feed_path(:action => 'rss', :page => @entries.next_page)))
    if current_site.userpic? || current_site.avatar
      avatar_url = current_site.userpic? ? current_site.userpic.url(:thumb64) : current_site.avatar.public_filename
      
      xml.image do
        xml.url image_path(avatar_url)
        xml.title { xml.cdata!(host_for_tlog(current_site) + (current_site.tlog_settings.title.blank? ? '' : (" - " + h(current_site.tlog_settings.title)))) }
        xml.link user_url(current_site)
      end
    end
  
    if @entries
      @entries.each do |entry|
        xml.item do        
          xml.title { xml.cdata!(strip_tags(white_list_entry(entry.excerpt.to_s))) } unless white_list_entry(entry.excerpt.to_s).blank?
          xml.description { xml.cdata!(render(:partial => 'entries/entry_embed', :locals => { :entry => entry })) }
          xml.author user_url(current_site)
          xml.link user_url(current_site, entry_path(entry))
          xml.guid user_url(current_site, entry_path(entry)), :isPermaLink => 'true'
          xml.pubDate entry.created_at.to_s(:rfc822)
          xml.comments user_url(current_site, entry_path(entry) + '#comments') if entry.comments_enabled?
        
          # <enclosure ...>. Не делаем для картинок, потому что они и так уже включены в код и
          #  некоторые рсс-читалки будут показывать картинку дважды
          if entry[:type] != 'ImageEntry' && !entry.attachments.empty?
            att = entry.attachments.first
            xml.enclosure :url => "#{current_service.url + att.public_filename}", :length => att.size, :type => att.content_type
          end
        end # xml.item do
      end # @entries.each
    end # if @entries
  end
end